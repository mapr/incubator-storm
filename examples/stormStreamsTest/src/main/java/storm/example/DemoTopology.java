package storm.example;import backtype.storm.Config;import backtype.storm.StormSubmitter;import backtype.storm.generated.AlreadyAliveException;import backtype.storm.generated.AuthorizationException;import backtype.storm.generated.InvalidTopologyException;import backtype.storm.topology.TopologyBuilder;import backtype.storm.tuple.Fields;import storm.kafka.*;import storm.kafka.bolt.KafkaBolt;import storm.kafka.bolt.mapper.FieldNameBasedTupleToKafkaMapper;import storm.kafka.bolt.selector.DefaultTopicSelector;import java.io.IOException;import java.util.Properties;import java.util.UUID;public class DemoTopology {    public static void main(String[] args) throws AlreadyAliveException, InvalidTopologyException, AuthorizationException, IOException {        TopologyBuilder builder = new TopologyBuilder();        if(args.length<2){            System.err.println("usage: command <zookeeperHost:port> <use kafka 09 API: true/false>");            return;        }        Properties props = new Properties();        props.load(DemoTopology.class.getResourceAsStream("/kafka.properties"));        props.put("topology.message.timeout.secs", 60);        String topicName = props.getProperty("source.topic");        String topicNameForAverage = props.getProperty("average.topic");        String zkConnString = args[0]; //localhost:5181        System.out.println("Will look for Zoo at " + zkConnString);        BrokerHosts hosts = new ZkHosts(zkConnString);        SpoutConfig spoutConfig = new SpoutConfig(hosts, topicName, topicName, UUID.randomUUID().toString());        spoutConfig.scheme = new KeyValueSchemeAsMultiScheme(new KafkaBoltKeyValueScheme());        if("true".equals(args[1])){            props.put(Config.KAFKA_USE_09_API, true);            spoutConfig.kafkaAPIv="0.9";        }        System.out.println("Properties: " + props.toString());        KafkaSpout spout = new KafkaSpout(spoutConfig);        builder.setSpout("spout", spout, 1);//        Properties props = new Properties();////        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");//        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");//        props.put("bootstrap.servers", "localhost:9092");        long tuplesCountPeriodInSecs = 5;        AggregationBolt averageBolt = new AggregationBolt(tuplesCountPeriodInSecs);        builder.setBolt("aggregationBolt", averageBolt, 1).shuffleGrouping("spout");        AverageCountBolt averageCountBolt = new AverageCountBolt(tuplesCountPeriodInSecs);        builder.setBolt("averageCounter", averageCountBolt, 1).globalGrouping("spout");        KafkaBolt dataToKafkaBolt = new KafkaBolt()                .withTopicSelector(new DefaultTopicSelector("/streaming_data/marlin:trash"))                .withTupleToKafkaMapper(new FieldNameBasedTupleToKafkaMapper())                .withProducerProperties(props);        builder.setBolt("aggregationToKafka", dataToKafkaBolt, 1).fieldsGrouping("aggregationBolt", new Fields("key", "message", "topic", "attempt"));        KafkaBolt averageCountToKafkaBolt = new KafkaBolt()                .withTopicSelector(new DefaultTopicSelector(topicNameForAverage))                .withTupleToKafkaMapper(new FieldNameBasedTupleToKafkaMapper())                .withProducerProperties(props);        builder.setBolt("averageCountToKafka", averageCountToKafkaBolt, 1).globalGrouping("averageCounter");//        Config conf = new Config();//        conf.put(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, 6*60);////        conf.put("bootstrap.servers", "localhost:9092");//        conf.put("key.deserializer","org.apache.kafka.common.serialization.StringDeserializer");//        conf.put("value.deserializer","org.apache.kafka.common.serialization.StringDeserializer");//        conf.put(Config.KAFKA_USE_09_API, true);        StormSubmitter.submitTopology("streamsTest", props, builder.createTopology());    }    public static class KafkaBoltKeyValueScheme extends StringKeyValueScheme {        @Override        public Fields getOutputFields() {            return new Fields("message");        }    }}